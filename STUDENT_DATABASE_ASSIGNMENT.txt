                                                           STUDENT DATABASE
TASK 1:
 
1) CREATE DATABASE SISDB;
   USE SISDB;

2) AND 4)

   a) Students Table
       
         CREATE TABLE Students (student_id INT PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, date_of_birth DATE NOT NULL, email VARCHAR(50)      UNIQUE NOT NULL, phone_number VARCHAR(15) UNIQUE NOT NULL);

   b) Teacher Table
      
         CREATE TABLE Teacher (teacher_id INT PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL);   
   
   c) Courses Table
 
         CREATE TABLE Courses (course_id INT PRIMARY KEY AUTO_INCREMENT, course_name VARCHAR(100) NOT NULL, credits INT CHECK (credits > 0), teacher_id INT, FOREIGN KEY (teacher_id) REFERENCES Teacher(teacher_id) ON DELETE SET NULL);
 
   d) Enrollments Table
 
         CREATE TABLE Enrollments (enrollment_id INT PRIMARY KEY AUTO_INCREMENT, student_id INT, course_id INT, enrollment_date DATE NOT NULL DEFAULT CURRENT_DATE, FOREIGN KEY (student_id) REFERENCES Students(student_id) ON DELETE CASCADE, FOREIGN KEY (course_id) REFERENCES Courses(course_id) ON DELETE CASCADE); 

   e)  Payments Table

         CREATE TABLE Payments (payment_id INT PRIMARY KEY AUTO_INCREMENT, student_id INT, amount DECIMAL(10,2) NOT NULL CHECK (amount > 0), payment_date DATE NOT NULL DEFAULT CURRENT_DATE, FOREIGN KEY (student_id) REFERENCES Students(student_id) ON DELETE CASCADE);
 
3)  
    In the attached file. 

5) 
   a) Students Table

     INSERT INTO Students (first_name, last_name, date_of_birth, email, phone_number) VALUES
('John', 'Doe', '2001-05-15', 'john.doe@email.com', '1234567890'),
('Jane', 'Smith', '2000-08-22', 'jane.smith@email.com', '1234567891'),
('Alice', 'Johnson', '2002-01-10', 'alice.johnson@email.com', '1234567892'),
('Bob', 'Williams', '1999-11-30', 'bob.williams@email.com', '1234567893'),
('Charlie', 'Brown', '2001-07-20', 'charlie.brown@email.com', '1234567894'),
('David', 'Miller', '2000-09-05', 'david.miller@email.com', '1234567895'),
('Emma', 'Davis', '2003-04-18', 'emma.davis@email.com', '1234567896'),
('Frank', 'Wilson', '1998-06-25', 'frank.wilson@email.com', '1234567897'),
('Grace', 'Taylor', '2001-12-13', 'grace.taylor@email.com', '1234567898'),
('Hannah', 'Anderson', '2002-03-09', 'hannah.anderson@email.com', '1234567899');
 
   b) Teacher Table

     INSERT INTO Teacher (first_name, last_name, email) VALUES
('Michael', 'Scott', 'michael.scott@email.com'),
('Pam', 'Beesly', 'pam.beesly@email.com'),
('Jim', 'Halpert', 'jim.halpert@email.com'),
('Dwight', 'Schrute', 'dwight.schrute@email.com'),
('Angela', 'Martin', 'angela.martin@email.com'),
('Kevin', 'Malone', 'kevin.malone@email.com'),
('Oscar', 'Martinez', 'oscar.martinez@email.com'),
('Stanley', 'Hudson', 'stanley.hudson@email.com'),
('Phyllis', 'Vance', 'phyllis.vance@email.com'),
('Ryan', 'Howard', 'ryan.howard@email.com');

   c) Courses Table

     INSERT INTO Courses (course_name, credits, teacher_id) VALUES
('Mathematics', 3, 1),
('Physics', 4, 2),
('Computer Science', 3, 3),
('History', 3, 4),
('Biology', 4, 5),
('Chemistry', 4, 6),
('English Literature', 3, 7),
('Psychology', 3, 8),
('Economics', 3, 9),
('Philosophy', 3, 10);

  d) Enrollments Table

    INSERT INTO Enrollments (student_id, course_id, enrollment_date) VALUES
(1, 1, '2024-01-10'),
(2, 2, '2024-01-15'),
(3, 3, '2024-01-20'),
(4, 4, '2024-01-25'),
(5, 5, '2024-02-01'),
(6, 6, '2024-02-05'),
(7, 7, '2024-02-10'),
(8, 8, '2024-02-15'),
(9, 9, '2024-02-20'),
(10, 10, '2024-02-25');

  e) Payments Table

    INSERT INTO Payments (student_id, amount, payment_date) VALUES
(1,500.00, '2024-01-12'),
(2,700.00, '2024-01-17'),
(3,650.00, '2024-01-22'),
(4,800.00, '2024-01-27'),
(5,750.00, '2024-02-03'),
(6,600.00, '2024-02-08'),
(7,550.00, '2024-02-13'),
(8,900.00, '2024-02-18'),
(9,650.00, '2024-02-23'),
(10,780.00, '2024-02-28');



TASK 2:

1) insert into Students(f_name,l_name,dob,email,ph_no) values("John","Doe","1995-08-15","john.doe@example.com",1234567890);

2) insert into Enrollments values(1,2,3,"2025-01-10");

3) update Teachers set email="kavitha@gmail.com" where teacher_id=4;

4) delete from Enrollments where student_id=1 AND course_id=2;

5) update Courses set teacher_id=4 where course_id=2;

6) delete from Students where student_id=1;
   delete from Enrollments where student_id=2;

7) update Payments set amount=100000 where payment_id=5;


TASK 3:

1) select s.student_name, sum(p.payment) from students s JOIN payments p ON s.student_id=p.student_id where s.student_id=1 group by s.student_id, s.name;
 
2) select c.course_name, count(e.student_id) from courses c LEFT JOIN Enrollments e ON c.course_id=e.course_id group by e.course_id;

3) select s.student_id, s.first_name, s.last_name, from student s LEFT JOIN enrollments e ON s.student_id = e.student_id where e.course_id IS NULL;

4) select s.first_name, s.last_name, c.course_name FROM Students s LEFT JOIN Enrollments e ON s.student_id = e.student_i LEFT JOIN Courses c ON e.course_id = c.course_id;

5) select t.frst_name, c.course_name from teacher t LEFT JOIN courses s ON t.teacher_id=c.teacher_id; 

6) select s.student_id, s.first_name, e.enrollment_date, e.course_id from student s JOIN enrollments e ON s.student_id=e.student_id where e.course_id=5;

7) select s.student_id, s.first_name, s.last_name from student s LEFT JOIN payments p ON s.student_id=p.sudent_id where p.amount IS NULL;

8) select c.course_name from courses c LEFT JOIN enrollments e ON c.course_id = e.course_id where e.student_id IS NULL;

9) select e1.student_id, e1.course_id from Enrollments e1 JOIN Enrollments e2 ON e1.student_id = e2.student_id WHERE e1.course_id <> e2.course_id GROUP BY e1.student_id;
  
10) select t.teacher_id t.first_name from teacher t LEFT JOIN courses c ON t.teacher_id=c.teacher_id where c.course_id IS NULL;    
  

TASK 4:

1) select course_name, AVG(stud_count) from ( select count(student_id) as stud_count from Courses group by course_name);  

2) select student_id from Payments where amount=(select max(amount) from Payments);

3) select course_id, count(student_id) from Enrollments group by course_id order by count(student_id) desc;
 
4) SELECT t.teacher_id, CONCAT(t.first_name, ' ', t.last_name) AS teacher_name, COALESCE(SUM(p.amount), 0) AS total_payments FROM Teacher t LEFT JOIN Courses c ON t.teacher_id=c.teacher_id
LEFT JOIN Enrollments e ON c.course_id = e.course_id LEFT JOIN Payments p ON e.student_id = p.student_id GROUP BY t.teacher_id, teacher_name;

5) select s.student_id, s.first_name, s.last_name from Students s JOIN Enrollments e ON s.student_id = e.student_id GROUP BY s.student_id, s.first_name, s.last_name HAVING COUNT(DISTINCT                   
   e.course_id) = (SELECT COUNT(*) FROM Courses);                       
 
6) select teacher_id ,first_name,last_name from teacher where teacher_id not in(select teacher_id from courses); 

7) select first_name,last_name,DATEDIFF(CURDATE(), date_of_birth)/
   365 from students;

8) select course_id from enrollments where student_id not in(select student_id from students);

9) select p.student_id,sum(p.amount),e.course_id from payments p Join Enrollments e ON p.student_id=e.student_id group by p.student_id,e.course_id;

10) select s.first_name,s.last_name,s.student_id from Students s JOIN payments p ON s.student_id=p.student_id group by s.student_id having count(p.student_id)>1;
   
11) select student_id, SUM(amount) from payments group by student_id;

12) Select c.course_name, count(e.student_id) AS student_count FROM Courses c LEFT JOIN Enrollments e ON c.course_id = e.course_id GROUP BY c.course_name;

13) select avg(amount) from payments ;  